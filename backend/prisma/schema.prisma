// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())

  friendsA  Friendship[] @relation("UserA")
  friendsB  Friendship[] @relation("UserB")
  chatsA    Chat[]       @relation("UserA")
  chatsB    Chat[]       @relation("UserB")
  messages  Message[]
}

model Friendship {
  id       String @id @default(uuid())
  userAId  String
  userBId  String
  createdAt DateTime @default(now())

  userA   User @relation("UserA", fields: [userAId], references: [id])
  userB   User @relation("UserB", fields: [userBId], references: [id])

  @@unique([userAId, userBId]) // Prevents duplicate friendships
}

model Chat {
  id       String @id @default(uuid())
  userAId  String
  userBId  String
  createdAt DateTime @default(now())

  userA   User @relation("UserA", fields: [userAId], references: [id])
  userB   User @relation("UserB", fields: [userBId], references: [id])

  messages Message[]

  @@unique([userAId, userBId]) // Ensures one chat per user pair
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())

  chat      Chat @relation(fields: [chatId], references: [id])
  sender    User @relation(fields: [senderId], references: [id])
}
